/**
 * The plate that appears in the UI.
 */
angular.module("plateyPlate", []).directive(
  "plateyPlate",
  [function() {
     function link(scope, element) {
       let plate = null;
       let disableSelectionChanged = false;

       element[0].addEventListener("click", function(e) {
         e.stopPropagation();
       });

       /**
        * Fires whenever the selection changes in the plate canvas.
        */
       function onPlateSelectionChanged(selectionChangeDetails) {
         if (!disableSelectionChanged) {
           scope.$apply(() => {
             if (selectionChangeDetails.newItems.length > 0) {
               const wellsToSelect =
                 scope.wells
                      .filter(well => selectionChangeDetails.newItems.indexOf(well.id) !== -1)

               scope.selectWells(wellsToSelect);
             }

             if (selectionChangeDetails.deSelectedItems.length > 0) {
               const wellsToDeselect =
                 scope.wells
                      .filter(well => selectionChangeDetails.deSelectedItems.indexOf(well.id) !== -1);

               scope.deSelectWells(wellsToDeselect);
             }
           });
         }
       }

       /**
        * Fires whenever a new layout configuration comes along.
        */
       function onLayoutChanged(element, newLayout) {
         if (newLayout !== undefined && newLayout !== null) {
           plate = new Platey(
             newLayout.wells,
             {
               gridWidth: newLayout.gridWidth,
               gridHeight: newLayout.gridHeight,
               element: element[0],
               selectors: newLayout.selectors
             });

           // Whenever the plate's selection changes, update
           // the angular scope
           plate.onSelectionChanged.add(onPlateSelectionChanged);
         }
       }

       /**
        * When a new layout configuration comes along, fire
        * onLayoutChanged.
        */
       scope.$watch(
         (scope) => scope.plateLayout,
         (newLayout) => onLayoutChanged(element, newLayout));

       /**
        * When the well selection changes elsewhere (i.e. not in the
        * plate itself) then update the plate.
        */
       scope.$watch(
         (scope) => scope.wells,
         (wells) => {
           if (plate !== null) {
             disableSelectionChanged = true;

             wells.forEach(well => {
               if (well.selected) {
                 plate.selectWell(well.id);
               } else {
                 plate.deSelectWell(well.id);
               }
             });

             disableSelectionChanged = false;
           }
         },
         true); // Deep watch
     }

     return { link: link };
   }]);
